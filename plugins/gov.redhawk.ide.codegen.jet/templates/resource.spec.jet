<%@ jet package="gov.redhawk.ide.codegen.jet.template.internal"
imports="gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.codegen.WaveDevSettings
gov.redhawk.ide.codegen.jet.Activator
gov.redhawk.ide.codegen.jet.TemplateParameter
gov.redhawk.model.sca.util.ModelUtil
java.util.HashSet
java.util.List
java.util.Set
java.util.regex.Matcher
java.util.regex.Pattern
mil.jpeojtrs.sca.scd.ComponentType
mil.jpeojtrs.sca.scd.Interface
mil.jpeojtrs.sca.scd.SoftwareComponent
mil.jpeojtrs.sca.spd.Implementation
org.eclipse.core.runtime.CoreException
org.eclipse.core.runtime.IStatus
org.eclipse.core.runtime.Status
org.eclipse.emf.common.util.EMap"
class="ResourceSpecTemplate"
skeleton="generator.skeleton"
%><%
    final TemplateParameter param = (TemplateParameter) argument;
    final EMap<String, ImplementationSettings> settings = ((WaveDevSettings) param.getImplSettings().eContainer().eContainer()).getImplSettings();
    final String name = param.getSoftPkg().getName();    
    final String version;
    if (param.getSoftPkg().getVersion() != null && param.getSoftPkg().getVersion().trim().length() != 0) {
        version = param.getSoftPkg().getVersion();
    } else {
        version = "1.0.0";
    }

    // Interfaces
    final Set<String> interfaceNamespaces = new HashSet<String>();
	final List<Interface> interfaces = param.getSoftPkg().getDescriptor().getComponent().getInterfaces().getInterface();
	final Pattern idlPattern = Pattern.compile("^IDL:(\\w+)/");
    for (Interface iface : interfaces) {
        final Matcher match = idlPattern.matcher(iface.getRepid());
        if (match.find()) {
            if (! "CF".equals(match.group(1))) {
                interfaceNamespaces.add(match.group(1));
            }
        }
    }
    
    // Language
    boolean hasCpp = false, hasJava = false, hasPython = false;
    for (final Implementation impl : param.getSoftPkg().getImplementation()) {
        final String language = impl.getProgrammingLanguage().getName();
        if ("C++".equals(language)) {
            hasCpp = true;
        } else if ("Java".equals(language)) {
            hasJava = true;
        } else if ("Python".equals(language)) {
            hasPython = true;
        }
    }
    
    // Strings that depend on project type
    final String sdrrootFolder;
    final String projectType;
    final SoftwareComponent scd = param.getSoftPkg().getDescriptor().getComponent();
    final ComponentType componentType = SoftwareComponent.Util.getWellKnownComponentType(scd);
    switch (componentType) {
    case RESOURCE:
        sdrrootFolder = "dom/components";
        projectType = "Component";
        break;
    case DEVICE:
        sdrrootFolder = "dev/devices";
        projectType = "Device";
        break;
    case SERVICE:
    	sdrrootFolder = "dev/services";
        projectType = "Service";
        break;
    default:
    	// For backwards compatibility, support non-spec strings the IDE used to generate
        try {
            if (scd != null && scd.getComponentType() != null) {
                final String compTypeStr = scd.getComponentType();
                if (compTypeStr.equals("executabledevice") || compTypeStr.equals("loadabledevice")) {
                    sdrrootFolder = "dev/devices";
                    projectType = "Device";
                    break;
                }
            }
        } catch (NullPointerException e) {
            // PASS
        }
    	throw new CoreException(new Status(IStatus.ERROR, Activator.PLUGIN_ID, "Template file does not support the specified project type"));
    }
%>
# By default, the RPM will install to the standard REDHAWK SDR root location (/var/redhawk/sdr)
# You can override this at install time using --prefix /new/sdr/root when invoking rpm (preferred method, if you must)
%{!?_sdrroot: %global _sdrroot /var/redhawk/sdr}
%define _prefix %{_sdrroot}
Prefix: %{_prefix}

# Point install paths to locations within our target SDR root
%define _sysconfdir    %{_prefix}/etc
%define _localstatedir %{_prefix}/var
%define _mandir        %{_prefix}/man
%define _infodir       %{_prefix}/info

Name: <%=name%>
Summary: <%=projectType%> %{name}<%
    if (param.getSoftPkg().getTitle() != null && param.getSoftPkg().getTitle().trim().length() > 0) {
        %> (<%=param.getSoftPkg().getTitle()%>)<%
	}%>
Version: <%=version%>
Release: 1
License: None
Group: REDHAWK/<%=projectType%>s
Source: %{name}-%{version}.tar.gz
BuildRoot: %{_tmppath}/%{name}-root

Requires: redhawk >= 1.8
BuildRequires: redhawk >= 1.8
BuildRequires: autoconf automake libtool

<%
	if (interfaceNamespaces.size() > 0) {
		boolean foundOther = false;
		// these interfaces are available through the redhawk install
		//  so no additional rpms are needed
		for (String ifaceNamespace : interfaceNamespaces) {
			if ((!ifaceNamespace.equals("CF")) &&
			 (!ifaceNamespace.equals("PortTypes")) &&
			 (!ifaceNamespace.equals("ExtendedEvent")) &&
			 (!ifaceNamespace.equals("ExtendedCF")) &&
			 (!ifaceNamespace.equals("StandardEvent")) &&
			 (!ifaceNamespace.equals("WKP"))) {
			 	foundOther = true;
			 	break;
			 }
		}
		if (foundOther) {
%>
# Interface requirements
Requires:<%
        for (String ifaceNamespace : interfaceNamespaces) {
			if ((!ifaceNamespace.equals("CF")) &&
			 (!ifaceNamespace.equals("PortTypes")) &&
			 (!ifaceNamespace.equals("ExtendedEvent")) &&
			 (!ifaceNamespace.equals("ExtendedCF")) &&
			 (!ifaceNamespace.equals("StandardEvent")) &&
			 (!ifaceNamespace.equals("WKP"))) {
            %> <%=ifaceNamespace.toLowerCase()%>Interfaces<%
			 }
        }
%>
BuildRequires:<%
        for (String ifaceNamespace : interfaceNamespaces) {
			if ((!ifaceNamespace.equals("CF")) &&
			 (!ifaceNamespace.equals("PortTypes")) &&
			 (!ifaceNamespace.equals("ExtendedEvent")) &&
			 (!ifaceNamespace.equals("ExtendedCF")) &&
			 (!ifaceNamespace.equals("StandardEvent")) &&
			 (!ifaceNamespace.equals("WKP"))) {
            %> <%=ifaceNamespace.toLowerCase()%>Interfaces<%
			 }
        }
        %>

<%
		}
    }
    if (!hasCpp && (hasJava | hasPython)) {
%>
BuildArch: noarch

<%
    }
    if (hasCpp) {
%>
# C++ requirements
Requires: libomniORB4.1
Requires: boost >= 1.41
Requires: apache-log4cxx >= 0.10
BuildRequires: boost-devel >= 1.41
BuildRequires: libomniORB4.1-devel
BuildRequires: apache-log4cxx-devel >= 0.10

<%
    }
    if (hasJava) {
%>
# Java requirements
Requires: java >= 1.6
BuildRequires: java-devel >= 1.6

<%
    }
    if (hasPython) {
%>
# Python requirements
Requires: python omniORBpy
BuildRequires: libomniORBpy3-devel
BuildRequires: python-devel >= 2.3

<%
    }
%>

%description
<%
    if (param.getSoftPkg().getDescription() != null) {
%>
<%=param.getSoftPkg().getDescription()%>
<%
    } else {
%>
<%=projectType%> %{name}
<%
    }
%>


%prep
%setup


%build
<%
    for (final Implementation impl : param.getSoftPkg().getImplementation()) {
        final ImplementationSettings implSettings = settings.get(impl.getId());
        if (implSettings == null) {
            continue;
        }
%>
# Implementation <%=impl.getId()%>
pushd <%=implSettings.getOutputDir()%>
./reconf
%define _bindir %{_prefix}/<%=sdrrootFolder%>/<%=name%>/<%=implSettings.getOutputDir()%>
%configure
make %{?_smp_mflags}
popd
<%
    }
%>


%install
rm -rf $RPM_BUILD_ROOT
<%
    for (final Implementation impl : param.getSoftPkg().getImplementation()) {
        final ImplementationSettings implSettings = settings.get(impl.getId());
        if (implSettings == null) {
            continue;
        }
%>
# Implementation <%=impl.getId()%>
pushd <%=implSettings.getOutputDir()%>
%define _bindir %{_prefix}/<%=sdrrootFolder%>/<%=name%>/<%=implSettings.getOutputDir()%> 
make install DESTDIR=$RPM_BUILD_ROOT
popd
<%
    }
%>


%clean
rm -rf $RPM_BUILD_ROOT


%files
%defattr(-,redhawk,redhawk,-)
%dir %{_prefix}/<%=sdrrootFolder%>/%{name}
%{_prefix}/<%=sdrrootFolder%>/%{name}/<%=ModelUtil.getSpdFileName(param.getSoftPkg())%>
<%
    if (param.getSoftPkg().getPropertyFile() != null) {
%>
%{_prefix}/<%=sdrrootFolder%>/%{name}/<%=ModelUtil.getPrfFileName(param.getSoftPkg().getPropertyFile())%>
<%
    }
%>
%{_prefix}/<%=sdrrootFolder%>/%{name}/<%=ModelUtil.getScdFileName(param.getSoftPkg())%>
<%
    for (final Implementation impl : param.getSoftPkg().getImplementation()) {
        final ImplementationSettings implSettings = settings.get(impl.getId());
        if (implSettings == null) {
            continue;
        }
        %>
%{_prefix}/<%=sdrrootFolder%>/%{name}/<%=implSettings.getOutputDir()%>
<%
    }
%>