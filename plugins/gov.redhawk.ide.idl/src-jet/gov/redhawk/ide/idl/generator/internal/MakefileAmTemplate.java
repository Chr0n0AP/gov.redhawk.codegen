/*******************************************************************************
 * This file is protected by Copyright. 
 * Please refer to the COPYRIGHT file distributed with this source distribution.
 *
 * This file is part of REDHAWK IDE.
 *
 * All rights reserved.  This program and the accompanying materials are made available under 
 * the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at 
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
// BEGIN GENERATED CODE
package gov.redhawk.ide.idl.generator.internal;

import gov.redhawk.ide.idl.generator.newidl.GeneratorArgs;

/**
 * @generated
 */
public class MakefileAmTemplate
{

  protected static String nl;
  public static synchronized MakefileAmTemplate create(String lineSeparator)
  {
    nl = lineSeparator;
    MakefileAmTemplate result = new MakefileAmTemplate();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "###############################################################################" + NL + "# CONFIGURE YOUR INTERFACES LIBRARY HERE" + NL + "#" + NL + "# vim: noet: softtabstop=0" + NL + "#" + NL + "# This Makefile.am will require GNUMake (because it uses special GNUMake" + NL + "# functions).  As an alternative, all of the specical functions can be" + NL + "# replaced with configure.ac macros and AC_SUBST calls." + NL + "#" + NL + "###############################################################################" + NL + "# As a Redhawk convention this should always be 'redhawk'" + NL + "LIBRARY_NAME = redhawk" + NL + "" + NL + "# Include default settings from the IDE" + NL + "# You may comment this line out and replace all _auto variables" + NL + "# if you want manual control of the build process" + NL + "include Makefile.am.ide" + NL + "" + NL + "# IMPORTANT: Per REDHAWK conventions, there must be one and only" + NL + "# one CORBA module/namespace declared in a given IDL Interfaces" + NL + "# library.  By convention, this name is capitalized and concise." + NL + "# The module can have sub-modules." + NL + "IDL_MODULE := $(redhawk_IDL_MODULE_auto)" + NL + "" + NL + "# A space separated list of IDL files to include in your library" + NL + "IDL_FILES := $(redhawk_IDL_FILES_auto)" + NL + "" + NL + "# External IDL namespaces that your IDLs reference, comment this line" + NL + "# out if your IDL has no external references" + NL + "IDL_EXTERNS := CF BULKIO" + NL + "" + NL + "# In some cases, you may need to define python externs " + NL + "#     f:p   Assume Python stub file for file f is in package p." + NL + "PYTHON_EXTERNS := LogInterfaces:ossie.cf DataType:ossie.cf Port:ossie.cf EventChannelManager:ossie.cf PortTypes:ossie.cf cf:ossie.cf bulkioDataTypes:bulkio.bulkioInterfaces CosEventComm CosEventChannelAdmin CosNaming" + NL + "" + NL + "IDL_INCLUDES := -I${OSSIE_HOME}/share/idl -I/usr/share/idl -I/usr/share/idl/omniORB -I/usr/share/idl/omniORB/COS" + NL + "" + NL + "# Relative path to the location of the IDL files" + NL + "IDL_SOURCE_PATH := ." + NL + "" + NL + "# A Qualifier to append to the version, by default this is a timestamp of the build" + NL + "BUNDLE_QUALIFIER := v$(shell date +%Y%m%d%H%M%S)" + NL + "" + NL + "# A user understandable name for the bundle" + NL + "BUNDLE_NAME := $(IDL_MODULE) IDL Interface" + NL + "" + NL + "# The Vendor that produced the bundle / idl" + NL + "BUNDLE_VENDOR = REDHAWK" + NL + "" + NL + "# Version of java the source files support" + NL + "JAVA_SOURCE_VERSION = 1.7" + NL + "" + NL + "# Version of java to compile to" + NL + "JAVA_TARGET_VERSION = $(JAVA_SOURCE_VERSION)" + NL + "" + NL + "# The required execution envirornment, this should be a JRE version or OSGI environment specification" + NL + "BUNDLE_REQUIRED_EXECUTION_ENVIRONMENT := J2SE-$(JAVA_TARGET_VERSION)" + NL + "" + NL + "# You have to manually set the _SOURCES, automake/libtool does not support" + NL + "# makefile variable substituion here...so unfortunately each IDL file" + NL + "# needs to be listed here...for each input IDL you will need to add three" + NL + "# sources.  For example:" + NL + "#        some_file.idl becomes ->" + NL + "#            src/cpp/some_fileSK.cpp src/cpp/some_fileDynSK.cpp src/cpp/some_file.h" + NL + "lib_LTLIBRARIES = lib";
  protected final String TEXT_2 = "Interfaces.la" + NL + "lib";
  protected final String TEXT_3 = "Interfaces_la_SOURCES = $(redhawk_IDL_SOURCES_auto)" + NL + "" + NL + ".PHONY: stage_idl_files" + NL + "stage_idl_files:" + NL + "\tmkdir -p build/idl/$(LIBRARY_NAME)/$(IDL_MODULE)" + NL + "\tcp $(IDL_SOURCE_PATH)/*.idl build/idl/$(LIBRARY_NAME)/$(IDL_MODULE)/" + NL + "" + NL + "-include stage_idl_files" + NL + "" + NL + "BUILT_SOURCES = $(redhawk_IDL_SOURCES_auto)" + NL + "" + NL + "###############################################################################" + NL + "# DO NOT MODIFY ANY LINES BELOW HERE" + NL + "###############################################################################" + NL + ".PHONY: all-local all-python install-python clean-python all-java install-java clean-java compile-java zip-src" + NL + ".INTERMEDIATE: build/java.files build/java.export setup.py " + NL + "LOWER_CASE_IDL_MODULE :=$(shell echo $(IDL_MODULE) | tr A-Z a-z)" + NL + "" + NL + "idldir = $(datadir)/idl/$(LIBRARY_NAME)/$(IDL_MODULE)" + NL + "dist_idl_DATA =  $(addprefix build/idl/$(LIBRARY_NAME)/$(IDL_MODULE)/, $(IDL_FILES))" + NL + "" + NL + "all-local: all-python all-java" + NL + "" + NL + "install-exec-hook: install-python install-java install-java-src" + NL + "" + NL + "install-data-hook: install-data-cpp" + NL + "" + NL + "clean-local: clean-python clean-java clean-cpp" + NL + "\trm -rf build" + NL + "" + NL + "build/idl/$(LIBRARY_NAME)/$(IDL_MODULE)/%.idl: $(IDL_SOURCE_PATH)/%.idl" + NL + "\tmkdir -p build/idl/$(LIBRARY_NAME)/$(IDL_MODULE)" + NL + "\tcp $< $@" + NL + "" + NL + "###############################################################################" + NL + "# C++ (via automake and libtool)" + NL + "pkgconfigdir = $(libdir)/pkgconfig" + NL + "dist_pkgconfig_DATA = $(PACKAGE_NAME).pc" + NL + "" + NL + "pkgincludedir = $(includedir)/$(LIBRARY_NAME)/$(IDL_MODULE)" + NL + "pkginclude_HEADERS = $(filter %.h, $(lib$(LOWER_CASE_IDL_MODULE)Interfaces_la_SOURCES))" + NL + "" + NL + "AM_CXXFLAGS = -Wall -I /usr/include/omniORB4 -I /usr/include -I /usr/local/include -I src/cpp -g $(OMNIORB_CFLAGS) $(OSSIE_CFLAGS)" + NL + "AM_LIBS = $(OSSIE_LIBS)" + NL + "" + NL + "src/cpp/$(LIBRARY_NAME)/$(IDL_MODULE)/%DynSK.cpp src/cpp/$(LIBRARY_NAME)/$(IDL_MODULE)/%SK.cpp src/cpp/$(LIBRARY_NAME)/$(IDL_MODULE)/%.h: build/idl/$(LIBRARY_NAME)/$(IDL_MODULE)/%.idl" + NL + "\t@mkdir -p \"src/cpp/$(LIBRARY_NAME)/$(IDL_MODULE)\"" + NL + "\t$(IDL) -I build/idl $(OSSIE_CFLAGS) $(OSSIE_IDLFLAGS) $(IDL_INCLUDES) -C src/cpp/$(LIBRARY_NAME)/$(IDL_MODULE) -bcxx -Wba -Wbd=DynSK.cpp -Wbh=.h -Wbs=SK.cpp -Wbkeep_inc_path $<" + NL + "# omniORB uses the a \".hh\" suffix for its COS header files, but omniidl doesn't" + NL + "# know the difference, so we must modify generated headers to account for that." + NL + "\t$(SED) 's|<COS/\\(.*\\)\\.h>|<COS/\\1.hh>|' src/cpp/$(LIBRARY_NAME)/$(IDL_MODULE)/$*.h > src/cpp/$(LIBRARY_NAME)/$(IDL_MODULE)/$*.h.tmp" + NL + "\tmv src/cpp/$(LIBRARY_NAME)/$(IDL_MODULE)/$*.h.tmp src/cpp/$(LIBRARY_NAME)/$(IDL_MODULE)/$*.h" + NL + "" + NL + "clean-cpp:" + NL + "\trm -rf src/cpp" + NL + "\trm -f $(PACKAGE_NAME).pc" + NL + "" + NL + "install-data-cpp:" + NL + "\tchmod 755 $(pkgconfigdir)" + NL + "\tchmod 755 $(pkgincludedir)" + NL + "" + NL + "$(PACKAGE_NAME).pc: Makefile.am" + NL + "\t@echo \"prefix=$(prefix)\" > $@" + NL + "\t@echo \"exec_prefix=$(exec_prefix)\" >> $@" + NL + "\t@echo \"libdir=$(libdir)\" >> $@" + NL + "\t@echo \"includedir=$(includedir)\" >> $@" + NL + "\t@echo \"\" >> $@" + NL + "\t@echo \"Name: $(PACKAGE_NAME)\" >> $@" + NL + "\t@echo \"Description: $(PACKAGE_NAME) for REDHAWK\" >> $@" + NL + "\t@echo \"Requires:\" >> $@" + NL + "\t@echo \"Version: $(PACKAGE_VERSION)\" >> $@" + NL + "\t@echo \"Libs: -L\\$${libdir} -l${LOWER_CASE_IDL_MODULE}Interfaces\" >> $@" + NL + "\t@echo \"Cflags: -I\\$${includedir}/$(LIBRARY_NAME)\" >> $@" + NL + "" + NL + "###############################################################################" + NL + "# Python" + NL + "" + NL + "# Per redhawk conventions, CORBA modules will be installed to a module" + NL + "# <libraryname>.<lowercasemodulename>Interfaces" + NL + "" + NL + "PYTHON_MODULE_NAME := $(LOWER_CASE_IDL_MODULE)Interfaces" + NL + "PYTHON_PACKAGE := $(LIBRARY_NAME).$(PYTHON_MODULE_NAME)" + NL + "PYTHON_BASE := $(subst .,/,$(PYTHON_PACKAGE))" + NL + "PY_SRC_OUT_DIR := $(addprefix src/python/, $(subst .,/, $(PYTHON_PACKAGE)))" + NL + "PY_SRCS := $(addprefix $(PY_SRC_OUT_DIR)/, $(subst .idl,_idl.py, $(IDL_FILES)))" + NL + "PY_BUILD_OUT_DIR := $(addprefix build/lib/, $(subst .,/, $(PYTHON_PACKAGE)))" + NL + "PY_BUILT_SRCS := $(addprefix $(PY_BUILD_OUT_DIR)/, $(subst .idl,_idl.py, $(IDL_FILES)))" + NL + "PY_IDL_EXTERNS := $(addprefix -Wbextern=, $(subst ,, $(PYTHON_EXTERNS)))" + NL + "" + NL + "PY_IDL_INCLUDES := -I build/idl -I ${OSSIE_HOME}/share/idl -I /usr/share/idl -I /usr/share/idl/omniORB -I /usr/share/idl/omniORB/COS" + NL + "" + NL + "$(PY_SRC_OUT_DIR)/%_idl.py: build/idl/$(LIBRARY_NAME)/$(IDL_MODULE)/%.idl" + NL + "\tmkdir -p $(PY_SRC_OUT_DIR)" + NL + "\tumask 022; $(IDL) $(PY_IDL_INCLUDES) $(OSSIE_CFLAGS) $(OSSIE_IDLFLAGS) -C src/python -bpython -Wbpackage=$(PYTHON_PACKAGE) $(PY_IDL_EXTERNS) $<" + NL + "" + NL + "setup.py: Makefile.am" + NL + "# Build up a setup.py line-by-line" + NL + "\t@echo \"#!/usr/bin/env python\" > $@" + NL + "\t@echo \"# AUTO-GENERATED - DO NOT MODIFY THIS FILE IS PRODUCED BY make\" >> $@" + NL + "\t@echo \"from distutils.core import setup\" >> $@" + NL + "\t@echo \"import os\" >> $@" + NL + "\t@echo \"\" >> $@" + NL + "\t@echo \"_packages = ['$(PYTHON_PACKAGE)',\" >> $@" + NL + "\t@echo \"            ]\" >> $@" + NL + "\t@echo \"\" >> $@" + NL + "\t@echo \"base = '$(PYTHON_BASE)'\" >> $@" + NL + "\t@echo \"path = os.path.join('src/python',base)\" >> $@" + NL + "\t@echo \"pkgs = []\" >> $@" + NL + "\t@echo \"for root, dirs, files in os.walk(path):\" >> $@" + NL + "\t@echo \"  for f in files:\" >> $@" + NL + "\t@echo \"    if f == '__init__.py' and root!=path:\" >> $@" + NL + "\t@echo \"      tmp = os.path.join(base, root[len(path)+1:])\" >> $@" + NL + "\t@echo \"      if tmp not in pkgs: pkgs.append(tmp)\" >> $@" + NL + "\t@echo \"\" >> $@" + NL + "\t@echo \"for pkg in pkgs: _packages.append(pkg)\" >> $@" + NL + "\t@echo \"\" >> $@" + NL + "\t@echo \"setup(\" >> $@" + NL + "\t@echo \"      name='$(PYTHON_MODULE_NAME)',\" >> $@" + NL + "\t@echo \"      version='$(PACKAGE_VERSION)',\" >> $@" + NL + "\t@echo \"      package_dir = {'': 'src/python'},\" >> $@" + NL + "\t@echo \"      packages=_packages\" >> $@" + NL + "\t@echo \")\" >> $@" + NL + "" + NL + "$(PY_BUILD_OUT_DIR): $(PY_SRCS) setup.py" + NL + "\tumask 022; python setup.py build --build-lib build/lib" + NL + "\ttouch $(PY_BUILD_OUT_DIR)" + NL + "" + NL + "all-python: $(PY_BUILD_OUT_DIR)" + NL + "" + NL + "install-python: $(PY_BUILT_SRCS) setup.py" + NL + "\tumask 022; python setup.py install -f --$(PYTHON_INSTALL_SCHEME)=$(DESTDIR)$(prefix)" + NL + "" + NL + "clean-python: setup.py" + NL + "\trm -rf src/python" + NL + "\tpython setup.py clean" + NL + "\trm setup.py" + NL + "" + NL + "###############################################################################" + NL + "# Java" + NL + "if HAVE_JAVASUPPORT" + NL + "" + NL + "# BUNDLE_PREFIX - Prefix at the start of the bundle symbolic name" + NL + "BUNDLE_PREFIX = idl" + NL + "" + NL + "# BUNDLE_SYMBOLIC_NAME - Used by OSGI, this is the identifer of the bundle" + NL + "BUNDLE_SYMBOLIC_NAME := $(BUNDLE_PREFIX).$(LOWER_CASE_IDL_MODULE)" + NL + "" + NL + "# JAVA_OUTPUT_JAR - The name of the jar file to export the idl bundle into" + NL + "JAVA_OUTPUT_JAR := $(IDL_MODULE)Interfaces.jar" + NL + "#JAVA_OUTPUT_JAR := $(BUNDLE_SYMBOLIC_NAME).jar" + NL + "" + NL + "# JAVA_SRC_JAR - The jar that contains the src code that was generated by IDLJ" + NL + "JAVA_SRC_JAR := $(IDL_MODULE)Interfaces.src.jar" + NL + "#JAVA_SRC_JAR := $(BUNDLE_SYMBOLIC_NAME).src.jar" + NL + "" + NL + "# BUNDLE_VERSION - Version of the OSGI Java Bundle produced, should be related to the version of the IDL," + NL + "BUNDLE_VERSION := $(PACKAGE_VERSION)" + NL + "" + NL + "# IDLJ_INCLUDES - The IDL include path used by IDLJ" + NL + "IDLJ_INCLUDES := -i build/idl -i ${OSSIE_HOME}/share/idl -i /usr/share/idl -i /usr/share/idl/omniORB -i /usr/share/idl/omniORB/COS" + NL + "" + NL + "# IDLJ_SRC_DEST - Destination for files generated by IDLJ" + NL + "IDLJ_SRC_DEST := src/java" + NL + "" + NL + "# IDL_TO_JAVA_TARGETS - Markers for IDL conversions" + NL + "IDL_TO_JAVA_TARGETS := \\" + NL + "\t$(addprefix src/java/, \\" + NL + "\t\t$(subst .idl,.idlj, $(IDL_FILES)) \\" + NL + " \t)" + NL + "" + NL + "# JAVA_SRCS - Temp file for holding source file lists" + NL + "JAVA_SRCS = build/java.files" + NL + "" + NL + "# JAVA_CP - Setup the classpath used in java compilation" + NL + "JAVA_CP := \\" + NL + "\t$(if $(IDL_EXTERNS), \\" + NL + "\t\t-cp $(subst : ,:, \\" + NL + "\t\t\t$(addprefix $(OSSIE_HOME)/lib/, \\" + NL + "\t\t\t\t$(addsuffix Interfaces.jar:, $(IDL_EXTERNS))\\" + NL + " \t\t\t)\\" + NL + " \t\t),\\" + NL + "\t)" + NL + "" + NL + "# IDL_EXTERNS_LOWER - Translates the external required IDJLs to lower case" + NL + "IDL_EXTERNS_LOWER := $(shell echo $(IDL_EXTERNS) | tr A-Z a-z) " + NL + "" + NL + "REQUIRE_BUNDLES := $(shell echo $(IDL_EXTERNS_LOWER) | sed 's/^/$(BUNDLE_PREFIX)./' | sed 's/\\//./g' | sed 's/$$/;visibility:=reexport/' | sed -e '$$ ! s/$$/,/')" + NL + "" + NL + "$(IDL_TO_JAVA_TARGETS): src/java/%.idlj: build/idl/$(LIBRARY_NAME)/$(IDL_MODULE)/%.idl" + NL + "\t@mkdir -p src/java" + NL + "\t$(IDLJ) -fall -td $(IDLJ_SRC_DEST) $(IDLJ_INCLUDES) $<" + NL + "\t$(IDLJ) -fallTie -td $(IDLJ_SRC_DEST) $(IDLJ_INCLUDES) $<" + NL + "\ttouch $@" + NL + "" + NL + "all-java: $(JAVA_OUTPUT_JAR) $(JAVA_SRC_JAR)" + NL + "" + NL + "clean-java:" + NL + "\trm -rf src/java" + NL + "\trm -f $(JAVA_OUTPUT_JAR)" + NL + "\trm -f $(JAVA_SRC_JAR)" + NL + "" + NL + "build/java.files: $(IDL_TO_JAVA_TARGETS)" + NL + "\t@mkdir -p build/java" + NL + "\tfind src/java -name '*.java' > $@" + NL + "\t$(JAVAC) $(JAVA_CP) -target $(JAVA_TARGET_VERSION) -source $(JAVA_SOURCE_VERSION) -d build/java @$@" + NL + "" + NL + "build/java.export: build/java.files " + NL + "\t@mkdir -p build/java" + NL + "\t@echo -n \"Export-Package:\" > $@" + NL + "\tfind src/java -mindepth 1 -type d | sed 's/src\\/java\\///' | sed 's/\\//./g' | sed 's/^/ /' | sed -e '$$ ! s/$$/,/' >> $@" + NL + "" + NL + "build/java/META-INF/MANIFEST.MF: Makefile.am build/java.export" + NL + "\t@mkdir -p build/java/META-INF" + NL + "\t@rm -f $@" + NL + "\t@echo \"Manifest-Version: 1.0\" >> $@" + NL + "\t@echo \"Bundle-ManifestVersion: 2\" >> $@" + NL + "\t@echo \"Bundle-Name: $(BUNDLE_NAME)\" >> $@" + NL + "\t@echo \"Bundle-SymbolicName: $(BUNDLE_SYMBOLIC_NAME)\" >> $@" + NL + "\t@echo \"Bundle-Version: $(BUNDLE_VERSION).$(BUNDLE_QUALIFIER)\" >> $@" + NL + "\t@echo \"Bundle-RequiredExecutionEnvironment: $(BUNDLE_REQUIRED_EXECUTION_ENVIRONMENT)\" >> $@" + NL + "\t@echo \"Bundle-Vendor: $(BUNDLE_VENDOR)\" >> $@" + NL + "\t@echo \"Require-Bundle: $(REQUIRE_BUNDLES)\" >> $@" + NL + "\t@cat build/java.export >> $@" + NL + " " + NL + "$(JAVA_OUTPUT_JAR): build/java.files build/java/META-INF/MANIFEST.MF" + NL + "\t@mkdir -p build/java" + NL + "\t${JAR} cMf $@ -C build/java META-INF/MANIFEST.MF -C build/java $(IDL_MODULE)" + NL + "" + NL + "src/java/META-INF/MANIFEST.MF: Makefile.am" + NL + "\t@mkdir -p src/java/META-INF" + NL + "\t@rm -f $@" + NL + "\t@echo \"Manifest-Version: 1.0\" >> $@" + NL + "\t@echo \"Bundle-ManifestVersion: 2\" >> $@" + NL + "\t@echo \"Bundle-Name: $(BUNDLE_NAME) Source\" >> $@" + NL + "\t@echo \"Bundle-SymbolicName: $(BUNDLE_SYMBOLIC_NAME).src\" >> $@" + NL + "\t@echo \"Bundle-Version: $(BUNDLE_VERSION).$(BUNDLE_QUALIFIER)\" >> $@" + NL + "\t@echo \"Bundle-Vendor: $(BUNDLE_VENDOR)\" >> $@" + NL + "\t@echo \"Eclipse-SourceBundle: $(BUNDLE_SYMBOLIC_NAME);version=$(BUNDLE_VERSION).$(BUNDLE_QUALIFIER)\" >> $@" + NL + "" + NL + "$(JAVA_SRC_JAR): build/java.files src/java/META-INF/MANIFEST.MF" + NL + "\t${JAR} cMf $@ -C $(IDLJ_SRC_DEST) ." + NL + "" + NL + "install-java: $(JAVA_OUTPUT_JAR)" + NL + "\tcp $< $(DESTDIR)$(prefix)/lib" + NL + "\tchmod 644 $(DESTDIR)$(prefix)/lib/$<" + NL + "" + NL + "install-java-src: $(JAVA_SRC_JAR)" + NL + "\tcp $< $(DESTDIR)$(prefix)/lib" + NL + "\tchmod 644 $(DESTDIR)$(prefix)/lib/$<" + NL + "" + NL + "###############################################################################" + NL + "# No Java - stubs" + NL + "else" + NL + "" + NL + "all-java install-java install-java-src clean-java:" + NL + "\t@echo \"Java support is disabled\"" + NL + "" + NL + "endif" + NL + "" + NL + "" + NL + "###############################################################################" + NL + "# General" + NL + "" + NL + "zip-src:" + NL + "\tzip \t$(LOWER_CASE_IDL_MODULE)Interfaces.zip \\" + NL + "\t\t$(IDL_FILES) \\" + NL + "\t\tMakefile.am \\" + NL + "\t\tconfigure.ac \\" + NL + "\t\treconf \\" + NL + "\t\treconf.launch \\" + NL + "\t\t.project \\" + NL + "\t\t.autotools \\" + NL + "\t\t.cproject \\" + NL + "\t\t.project \\" + NL + "\t\t.settings/org.eclipse.cdt.managedbuilder.core.prefs \\" + NL + "\t\tREADME" + NL + "" + NL + "" + NL + "reallyclean: clean" + NL + "\trm -f configure" + NL + "\trm -f Makefile.in" + NL + "\trm -f config.log" + NL + "\trm -f depcomp" + NL + "\trm -f config.guess" + NL + "\trm -f config.sub" + NL + "\trm -f ltmain.sh" + NL + "\trm -rf .deps" + NL + "\trm -f Makefile" + NL + "\trm -f config.status" + NL + "\trm -f libtool" + NL + "\trm -rf acinclude.m4" + NL + "\trm -f missing" + NL + "\trm -rf aclocal.m4" + NL + "\trm -f install-sh" + NL + "\trm -rf autom4te.cache" + NL + "\trm -f *.lo" + NL + "\trm -f *.o" + NL + "\trm -rf src";
  protected final String TEXT_4 = NL;

    /**
    * {@inheritDoc}
    */

    public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
	GeneratorArgs args = (GeneratorArgs) argument;
	String interfaceName = args.getInterfaceName() + "Interfaces";
	String idlModuleName = interfaceName.split("Interfaces")[0].toUpperCase();

    stringBuffer.append(TEXT_1);
    stringBuffer.append(idlModuleName.toLowerCase());
    stringBuffer.append(TEXT_2);
    stringBuffer.append(idlModuleName.toLowerCase());
    stringBuffer.append(TEXT_3);
    stringBuffer.append(TEXT_4);
    return stringBuffer.toString();
  }
} 